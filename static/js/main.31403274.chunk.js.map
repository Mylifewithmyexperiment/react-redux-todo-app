{"version":3,"sources":["logo.svg","constants.js","redux/reducers/visibilityFilter.js","redux/actionTypes.js","redux/reducers/todos.js","redux/reducers/index.js","redux/store.js","App.js","redux/actions.js","components/AddTodo.js","components/Todo.js","redux/selectors.js","components/TodoList.js","components/VisibilityFilters.js","TodoApp.js","serviceWorker.js","index.js"],"names":["module","exports","VISIBILITY_FILTERS","ALL","COMPLETED","INCOMPLETE","initialState","visibilityFilter","state","action","type","payload","filter","allIds","byIds","combineReducers","todos","id","content","completed","createStore","rootReducer","App","nextTodoId","AddTodo","props","updateInput","input","setState","handleAddTodo","addTodo","onChange","e","target","value","this","className","onClick","React","Component","connect","toggleTodo","todo","cx","getTodosState","store","getTodos","getTodoList","map","getTodoById","allTodos","getTodosByVisibilityFilter","length","index","key","activeFilter","setFilter","Object","keys","filterKey","currentFilter","TodoApp","Boolean","window","location","hostname","match","rootElement","document","getElementById","ReactDOM","render"],"mappings":"oHAAAA,EAAOC,QAAU,IAA0B,kC,mICA9BC,EAAqB,CAC9BC,IAAK,MACLC,UAAW,YACXC,WAAY,cCAVC,EAAeJ,EAAmBC,IAczBI,EAZU,WAAmC,IAAlCC,EAAiC,uDAAzBF,EAAcG,EAAW,uCACzD,OAAQA,EAAOC,MACb,ICLsB,aDMpB,OAAOD,EAAOE,QAAQC,OAExB,QACE,OAAOJ,I,sBETPF,EAAe,CACnBO,OAAQ,GACRC,MAAO,ICAMC,cAAgB,CAAEC,MDGlB,WAAwC,IAA/BR,EAA8B,uDAAtBF,EAAcG,EAAQ,uCACpD,OAAQA,EAAOC,MACb,IDToB,WCSJ,IAAD,EACWD,EAAOE,QAAvBM,EADK,EACLA,GAAIC,EADC,EACDA,QACZ,OAAO,2BACFV,GADL,IAEEK,OAAO,GAAD,mBAAML,EAAMK,QAAZ,CAAoBI,IAC1BH,MAAM,2BACDN,EAAMM,OADN,kBAEFG,EAAK,CACJC,UACAC,WAAW,OAKnB,IDtBuB,cCsBJ,IACTF,EAAOR,EAAOE,QAAdM,GACR,OAAO,2BACFT,GADL,IAEEM,MAAM,2BACDN,EAAMM,OADN,kBAEFG,EAFE,2BAGET,EAAMM,MAAMG,IAHd,IAIDE,WAAYX,EAAMM,MAAMG,GAAIE,gBAKpC,QACE,OAAOX,ICjC2BD,qBCDzBa,cAAYC,G,YCcZC,I,gCCfXC,EAAa,ECEXC,E,kDACJ,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAIRC,YAAc,SAAAC,GACZ,EAAKC,SAAS,CAAED,WANC,EASnBE,cAAgB,WACd,EAAKJ,MAAMK,QAAQ,EAAKtB,MAAMmB,OAC9B,EAAKC,SAAS,CAAED,MAAO,MATvB,EAAKnB,MAAQ,CAAEmB,MAAO,IAFL,E,qDAcT,IAAD,OACP,OACE,6BACE,2BACEI,SAAU,SAAAC,GAAC,OAAI,EAAKN,YAAYM,EAAEC,OAAOC,QACzCA,MAAOC,KAAK3B,MAAMmB,QAEpB,4BAAQS,UAAU,WAAWC,QAASF,KAAKN,eAA3C,iB,GAtBcS,IAAMC,WA8BbC,cACb,KACA,CAAEV,QDhCmB,SAAAZ,GAAO,MAAK,CACjCR,KLLsB,WKMtBC,QAAS,CACPM,KAAMM,EACNL,cC0BWsB,CAGbhB,G,gBCjBagB,cACb,KACA,CAAEC,WFVsB,SAAAxB,GAAE,MAAK,CAC/BP,KLZyB,cKazBC,QAAS,CAAEM,SEMEuB,EAfF,SAAC,GAAD,IAAGE,EAAH,EAAGA,KAAMD,EAAT,EAASA,WAAT,OACX,wBAAIL,UAAU,YAAYC,QAAS,kBAAMI,EAAWC,EAAKzB,MACtDyB,GAAQA,EAAKvB,UAAY,eAAO,eAAM,IACvC,0BACEiB,UAAWO,IACT,kBACAD,GAAQA,EAAKvB,WAAa,+BAG3BuB,EAAKxB,aCZC0B,EAAgB,SAAAC,GAAK,OAAIA,EAAM7B,OAS/B8B,EAAW,SAAAD,GAAK,OAPF,SAAAA,GAAK,OAC9BD,EAAcC,GAASD,EAAcC,GAAOhC,OAAS,GAOrDkC,CAAYF,GAAOG,KAAI,SAAA/B,GAAE,OALA,SAAC4B,EAAO5B,GAAR,OACzB2B,EAAcC,GAAd,2BAA4BD,EAAcC,GAAO/B,MAAMG,IAAvD,IAA4DA,OAAO,GAItCgC,CAAYJ,EAAO5B,OCcnCuB,eAPS,SAAAhC,GAGtB,MAAO,CAAEQ,MDR+B,SAAC6B,EAAOtC,GAChD,IAAM2C,EAAWJ,EAASD,GAC1B,OAAQtC,GACN,KAAKL,EAAmBE,UACtB,OAAO8C,EAAStC,QAAO,SAAA8B,GAAI,OAAIA,EAAKvB,aACtC,KAAKjB,EAAmBG,WACtB,OAAO6C,EAAStC,QAAO,SAAA8B,GAAI,OAAKA,EAAKvB,aACvC,KAAKjB,EAAmBC,IACxB,QACE,OAAO+C,GCFGC,CAA2B3C,EADZA,EAArBD,qBAMKiC,EAnBE,SAAC,GAAD,IAAGxB,EAAH,EAAGA,MAAH,OACf,wBAAIoB,UAAU,aACXpB,GAASA,EAAMoC,OACZpC,EAAMgC,KAAI,SAACN,EAAMW,GACf,OAAO,kBAAC,EAAD,CAAMC,IAAG,eAAUZ,EAAKzB,IAAMyB,KAAMA,OAE7C,qBC8BOF,eATS,SAAAhC,GACtB,MAAO,CAAE+C,aAAc/C,EAAMD,oBAU7B,CAAEiD,UL5BqB,SAAA5C,GAAM,MAAK,CAAEF,KLfZ,aKe8BC,QAAS,CAAEC,aK0BpD4B,EAnCW,SAAC,GAAiC,IAA/Be,EAA8B,EAA9BA,aAAcC,EAAgB,EAAhBA,UACzC,OACE,yBAAKpB,UAAU,sBACZqB,OAAOC,KAAKxD,GAAoB8C,KAAI,SAAAW,GACnC,IAAMC,EAAgB1D,EAAmByD,GACzC,OACE,0BACEL,IAAG,4BAAuBM,GAC1BxB,UAAWO,IACT,SACAiB,IAAkBL,GAAgB,kBAEpClB,QAAS,WACPmB,EAAUI,KAGXA,U,MClBE,SAASC,IACtB,OACE,yBAAKzB,UAAU,YACb,4CACA,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,OCAc0B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCRN,IAAMC,EAAcC,SAASC,eAAe,QAC5CC,IAASC,OACP,kBAAC,IAAD,CAAU1B,MAAOA,GACf,kBAACgB,EAAD,OAEFM,K","file":"static/js/main.31403274.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","export const VISIBILITY_FILTERS = {\r\n    ALL: \"all\",\r\n    COMPLETED: \"completed\",\r\n    INCOMPLETE: \"incomplete\"\r\n  };\r\n  ","import { SET_FILTER } from \"../actionTypes\";\r\nimport { VISIBILITY_FILTERS } from \"../../constants\";\r\n\r\nconst initialState = VISIBILITY_FILTERS.ALL;\r\n//updated state \r\nconst visibilityFilter = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case SET_FILTER: {\r\n      return action.payload.filter;\r\n    }\r\n    default: {\r\n      return state;\r\n    }\r\n  }\r\n};\r\n// now it will go to al the component which has connect here we have that conect in component visibilty filters\r\n\r\nexport default visibilityFilter;\r\n","export const ADD_TODO = \"ADD_TODO\";\r\nexport const TOGGLE_TODO = \"TOGGLE_TODO\";\r\nexport const SET_FILTER = \"SET_FILTER\";\r\n","import { ADD_TODO, TOGGLE_TODO } from \"../actionTypes\";\r\n\r\nconst initialState = {\r\n  allIds: [],\r\n  byIds: {}\r\n};\r\n\r\nexport default function(state = initialState, action) {\r\n  switch (action.type) {\r\n    case ADD_TODO: {\r\n      const { id, content } = action.payload;  //two variable id and content\r\n      return {   // here new state return to store.js    \r\n        ...state,\r\n        allIds: [...state.allIds, id],   //maintain all id \r\n        byIds: {\r\n          ...state.byIds,  //abc &pqr   maintain data \r\n          [id]: {    //2 = pqr\r\n            content,    //put and update\r\n            completed: false     //\r\n          }\r\n        }\r\n      };\r\n    }\r\n    case TOGGLE_TODO: {\r\n      const { id } = action.payload;\r\n      return {\r\n        ...state,\r\n        byIds: {\r\n          ...state.byIds,\r\n          [id]: {\r\n            ...state.byIds[id],\r\n            completed: !state.byIds[id].completed\r\n          }\r\n        }\r\n      };\r\n    }\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import { combineReducers } from \"redux\";\r\nimport visibilityFilter from \"./visibilityFilter\";\r\nimport todos from \"./todos\";\r\n\r\nexport default combineReducers({ todos, visibilityFilter });\r\n","import { createStore } from \"redux\";\r\nimport rootReducer from \"./reducers\";\r\n\r\nexport default createStore(rootReducer);\r\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n      \n\n<h1> To DO app@!!!s </h1>\n      \n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","import { ADD_TODO, TOGGLE_TODO, SET_FILTER } from \"./actionTypes\";\r\n\r\nlet nextTodoId = 0;\r\n\r\nexport const addTodo = content => ({ // based on type\r\n  type: ADD_TODO,\r\n  payload: {    //as an object //first goes to index.js of reducers and from there based on action type it goes to todo class\r\n    id: ++nextTodoId,\r\n    content\r\n  }\r\n});\r\n\r\nexport const toggleTodo = id => ({\r\n  type: TOGGLE_TODO,\r\n  payload: { id }\r\n});\r\n//all comes here \r\nexport const setFilter = filter => ({ type: SET_FILTER, payload: { filter } });  // from click it will get all ,incomplete or completed\r\n// go to visibilitty filter","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { addTodo } from \"../redux/actions\";\r\n\r\nclass AddTodo extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { input: \"\" };\r\n  }\r\n\r\n  updateInput = input => {\r\n    this.setState({ input });\r\n  };\r\n\r\n  handleAddTodo = () => {   //action.js of reducers\r\n    this.props.addTodo(this.state.input);\r\n    this.setState({ input: \"\" });  //now we are dispatching data to action.js of reducers.\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <input  \r\n          onChange={e => this.updateInput(e.target.value)}\r\n          value={this.state.input}\r\n        />\r\n        <button className=\"add-todo\" onClick={this.handleAddTodo}> \r\n          Add Todo\r\n        </button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n//during updated connect view with redux\r\nexport default connect(\r\n  null,\r\n  { addTodo }\r\n)(AddTodo);\r\n// export default AddTodo;\r\n","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport cx from \"classnames\";\r\nimport { toggleTodo } from \"../redux/actions\";\r\n\r\nconst Todo = ({ todo, toggleTodo }) => (\r\n  <li className=\"todo-item\" onClick={() => toggleTodo(todo.id)}>\r\n    {todo && todo.completed ? \"ðŸ‘Œ\" : \"ðŸ‘‹\"}{\" \"}\r\n    <span\r\n      className={cx(\r\n        \"todo-item__text\",\r\n        todo && todo.completed && \"todo-item__text--completed\"\r\n      )}\r\n    >\r\n      {todo.content}\r\n    </span>\r\n  </li>\r\n);\r\n\r\n// export default Todo;\r\nexport default connect(\r\n  null,\r\n  { toggleTodo }\r\n)(Todo);\r\n","import { VISIBILITY_FILTERS } from \"../constants\";\r\n\r\nexport const getTodosState = store => store.todos;\r\n\r\nexport const getTodoList = store =>\r\n  getTodosState(store) ? getTodosState(store).allIds : [];\r\n\r\nexport const getTodoById = (store, id) =>\r\n  getTodosState(store) ? { ...getTodosState(store).byIds[id], id } : {};\r\n\r\n \r\nexport const getTodos = store =>\r\n  getTodoList(store).map(id => getTodoById(store, id));\r\n//here vf will incomplete && store will have all the data \r\nexport const getTodosByVisibilityFilter = (store, visibilityFilter) => {\r\n  const allTodos = getTodos(store);\r\n  switch (visibilityFilter) {\r\n    case VISIBILITY_FILTERS.COMPLETED:\r\n      return allTodos.filter(todo => todo.completed);\r\n    case VISIBILITY_FILTERS.INCOMPLETE:\r\n      return allTodos.filter(todo => !todo.completed);// returning the incompleted data\r\n    case VISIBILITY_FILTERS.ALL:\r\n    default:\r\n      return allTodos;\r\n  }\r\n};\r\n","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport Todo from \"./Todo\";\r\n// import { getTodos } from \"../redux/selectors\";\r\nimport { getTodosByVisibilityFilter } from \"../redux/selectors\";\r\nimport { VISIBILITY_FILTERS } from \"../constants\";\r\n\r\nconst TodoList = ({ todos }) => (\r\n  <ul className=\"todo-list\">\r\n    {todos && todos.length\r\n      ? todos.map((todo, index) => {\r\n          return <Todo key={`todo-${todo.id}`} todo={todo} />;\r\n        })\r\n      : \"No todos, yay!\"}\r\n  </ul>\r\n);\r\n\r\n \r\n// it is matched here \r\nconst mapStateToProps = state => {\r\n  const { visibilityFilter } = state;\r\n  const todos = getTodosByVisibilityFilter(state, visibilityFilter);\r\n  return { todos };\r\n   \r\n};\r\n// export default TodoList;\r\nexport default connect(mapStateToProps)(TodoList);\r\n","import React from \"react\";\r\nimport cx from \"classnames\";\r\nimport { connect } from \"react-redux\";\r\nimport { setFilter } from \"../redux/actions\";\r\nimport { VISIBILITY_FILTERS } from \"../constants\";\r\n//when clicked on incompleted one it comes directly to visibility filters of component then to onclick\r\n//as an updated state all comes \r\n//state and function\r\nconst VisibilityFilters = ({ activeFilter, setFilter }) => { // active filte updated state\r\n  return (\r\n    <div className=\"visibility-filters\">\r\n      {Object.keys(VISIBILITY_FILTERS).map(filterKey => {  //arrays of keys then map with all, completed and incompleted\r\n        const currentFilter = VISIBILITY_FILTERS[filterKey];  // from constant vsribloe declared it takes here\r\n        return (\r\n          <span\r\n            key={`visibility-filter-${currentFilter}`}  //key to uniquely identify to filter\r\n            className={cx(\r\n              \"filter\",\r\n              currentFilter === activeFilter && \"filter--active\"\r\n            )}\r\n            onClick={() => {    // from here it get all, incomplete or complelte\r\n              setFilter(currentFilter);\r\n            }}\r\n          >\r\n            {currentFilter}\r\n          </span>\r\n        );\r\n      })}\r\n    </div>\r\n  );\r\n};\r\n//at last it finally call the all connect methods to match  which is here in this case matched at TOdo list\r\n\r\n//aftrer all in come here     \r\nconst mapStateToProps = state => {\r\n  return { activeFilter: state.visibilityFilter };   // return the updated state\r\n};\r\n// export default VisibilityFilters;\r\n\r\n// updated state will come to mapstatetoprops,\r\n//connecting redux to the view \r\n\r\n//subscribing  visibilityfilters fromm redux state.\r\nexport default connect(    \r\n  mapStateToProps,   \r\n  { setFilter }     // from here it wil go to the subscribe part i.e, connect method which is presnt in TodoList and from there it will render data over UI\r\n)(VisibilityFilters); //component that you want to map\r\n\r\n\r\n// parent to child data transfers using props","import React from \"react\";\r\nimport AddTodo from \"./components/AddTodo\";\r\nimport TodoList from \"./components/TodoList\";\r\nimport VisibilityFilters from \"./components/VisibilityFilters\";\r\nimport \"./styles.css\";\r\n\r\nexport default function TodoApp() {\r\n  return (\r\n    <div className=\"todo-app\">\r\n      <h1>Todo List !!</h1>\r\n      <AddTodo />\r\n      <TodoList />\r\n      <VisibilityFilters />\r\n    </div>\r\n  );\r\n}\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport { Provider } from \"react-redux\";\nimport store from \"./redux/store\";\nimport App from './App';\nimport TodoApp from \"./TodoApp\";\nimport * as serviceWorker from './serviceWorker';\n\n//called only once \nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(\n  <Provider store={store}>\n    <TodoApp />\n  </Provider>,\n  rootElement\n);\n \n\n"],"sourceRoot":""}